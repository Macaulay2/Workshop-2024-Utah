TEST /// -- basic test
  S = QQ[x,y]
  M = coker matrix{{1,0},{1,y}}
  A = summands M
  B = summands prune M
  C = summands trim M
  -- FIXME: this keeps annoyingly breaking
  assert same(A, {prune M}, B, prune \ C)
///

TEST /// -- direct summands of a free module
  R = ZZ/2[x_0..x_5]
  M = R^{100:-2,100:0,100:2}
  A = summands M;
  B = summands(M, ExtendGroundField => 2);
  C = summands(M, ExtendGroundField => 4);
  D = summands(M, ExtendGroundField => ZZ/101);
  E = summands(M, ExtendGroundField => GF(2,2));
  assert same(M, directSum A)
  assert same(A, B, C, D, E)
///

TEST /// -- direct summands of a multigraded free module
  R = QQ[x,y,z] ** QQ[a,b,c]
  M = R^{{0,0},{0,1},{1,0},{-1,0},{0,-1},{1,-1},{-1,1}}
  assert same(M, directSum summands M)
  --assert first isIsomorphic(directSum elapsedTime summands M, M)
///

TEST /// -- direct summands of a ring
  S = ZZ/3[x,y,z]
  R = ZZ/3[x,y,z,w]/(x^3+y^3+z^3+w^3)
  f = map(R, S)
  M = pushForward(f, module R)
  assert(M == S^{0,-1,-2})
///

-- FIXME: takes 13s, which is more than it used to
TEST /// -- direct summands over field extensions
  debug needsPackage "DirectSummands"
  R = (ZZ/7)[x,y,z]/(x^3+y^3+z^3);
  X = Proj R;
  M = module frobeniusPushforward(1, OO_X);
  -* is smartBasis useful? yes!
  elapsedTime A = End M; -- ~0.65s
  elapsedTime B = basis({0}, A); -- ~0.23s
  elapsedTime B = smartBasis({0}, A); -- ~0.03s
  *-
  -- if this test fails, check if "try findIdempotent M" if hiding any unexpected errors
  elapsedTime assert({1, 2, 2, 2} == rank \ summands M) -- 2.28s
  elapsedTime assert({1, 2, 2, 2} == rank \ summands(M, ExtendGroundField => GF 7)) -- 2.87s -> 2.05
  elapsedTime assert({1, 2, 2, 2} == rank \ summands(M, ExtendGroundField => GF(7, 3))) -- 3.77s -> 2.6
  elapsedTime assert(toList(7:1)  == rank \ summands(M, ExtendGroundField => GF(7, 2))) -- 2.18s -> 0.47
///

TEST ///
  R = ZZ/101[x,y,z]/(x^3, x^2*y, x*y^2, y^4, y^3*z)
  C = res(coker vars R, LengthLimit => 3)
  D = res(coker transpose C.dd_3, LengthLimit => 3)
  M = coker D.dd_3
  summands M
///

-- FIXME: takes 78s
TEST ///
  --tests largepowers
  K = ZZ/7
  R = K[x,y,z]/(x^3+y^3+z^3)
  X = Proj R
  M1 = summands(frobeniusPushforward(1, OO_X), ExtendGroundField => 2)
  M2 = frobeniusPushforward(1, M1#1)
  L = potentialExtension M2
  findIdem changeBaseField(L, M2)
///

TEST ///
  -- testing reduceScalar
  restart
  debug needsPackage "DirectSummands"
  assert elapsedTime isIdempotent(2 * id_((ZZ/5[x])^500)) -- .03s
  --
  R = (ZZ/3)[x,y,z,w]/(x^3*y+y^3*z+x*y*z*w+z^3*w+x*w^3)
  m = map(subquotient(map(R^36,R^{{0}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}},{{1, 0, 0, 0, 0, 0, 0, 0, y*z, 0, w^2, x*w, y^2, z*w, x*w, x*y+z^2, z^2, y*z, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0}, {0, 0, z, 0, 0, y, 0, 0, 0, w^2, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, x*w, 0, 0, 0, 0, 0, 0, y*w}, {0, w, 0, z, 0, 0, y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, y*w, 0, 0, 0, 0, y^2, 0, x*w, 0, y*z, 0, 0}, {0, y, x, 0, 0, z, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, x*w, 0, y^2, 0, 0, 0}, {0, 0, 0, x, 0, 0, z, x*w, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, 0, 0, 0, 0, 0, 0, y^2, 0}, {0, 0, 0, 0, 0, 0, 0, 0, x*w, 0, y^2, z*w, 0, 0, 0, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, z, x, 0, 0, 0, 0, 0, 0, z^2, x*z, x*w, x*w, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w}, {1, x, 0, 0, z, 0, 0, y*w, y*z, z*w, w^2, x*w, 0, 0, 0, 0, 0, w^2, 0, 0, x*z, 0, z^2, 0, 0, y^2, 0, 0}, {0, z, 0, 0, 0, 0, w, 0, 0, x*z, 0, 0, 0, 0, 0, 0, y*z, x*w, 0, z^2, 0, 0, 0, x*z, 0, x^2, 0, 0}, {0, 0, 0, 0, x, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, x, 0, 0, z, x*w, x*z, y*z, 0, z^2, 0, 0, 0, 0, x^2, x*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, y, x, w, 0, 0, 0, 0, 0, z*w, y*w, x^2, y*z, y*z, y^2+x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w}, {0, w, y, 0, 0, 0, 0, z*w, 0, x*w, 0, 0, 0, 0, 0, 0, y*w, 0, z*w, 0, x^2, 0, 0, 0, 0, 0, 0, 0}, {1, x, 0, y, z, w, 0, x*z, y*z, z*w, w^2, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, x^2, 0, x*w, 0, w^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, 0, y*w}, {0, 0, 0, 0, x, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0}, {0, y, x, 0, 0, z, 0, y*z, x^2, 0, z*w, y*w, 0, 0, 0, 0, x*w, 0, 0, 0, 0, 0, x*w, 0, 0, 0, 0, z*w}, {0, 0, z, x, w, 0, 0, 0, 0, 0, x*z, 0, x*y, y*z+w^2, z^2, z*w, z*w, y*w, x*w, x*w, 0, 0, z*w, 0, 0, 0, 0, 0}, {0, 0, w, 0, y, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, 0, y*z, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, y*z+w^2, 0, x*y, 0, z^2, 0, y*w, 0, 0}, {1, x, 0, y, z, w, 0, x*z, y*z, z*w, y*z+w^2, x*w, 0, 0, 0, 0, 0, 0, y*w, y*w, 0, 0, 0, 0, x*y, y^2, 0, y*z}, {0, z, 0, 0, 0, 0, w, 0, 0, x*z, x*w, 0, 0, 0, 0, 0, y*z, 0, z^2, 0, 0, 0, 0, 0, 0, 0, x*y, 0}, {0, w, 0, z, 0, 0, y, z*w, z^2, 0, z^2, y*z+w^2, 0, 0, 0, 0, 0, 0, z*w, z*w, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, x, w, 0, 0, 0, 0, 0, 0, 0, x*z, y*w, x*y, 0, y^2, y^2, z*w, 0, w^2, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, 0, y*w, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, w, 0, y, 0, 0, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, x*y, 0, y*w, y*z, 0, 0, z*w, 0, 0}, {0, w, y, 0, 0, 0, 0, z*w, 0, x*w, 0, y*z, 0, 0, 0, 0, y*w, 0, 0, 0, 0, 0, 0, 0, y*w, 0, 0, x*y}, {1, x, 0, 0, z, 0, 0, y*w, y*z, z*w, w^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, 0, 0, y^2, y*w, 0}, {0, 0, z, 0, 0, y, 0, 0, 0, w^2, y*w, z^2, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, x*w, y*z, x*z, x*z, x*y, 0, 0, 0, 0, 0, 0, 0, w^2, 0, 0}, {0, 0, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, w^2, y*z, 0, 0, 0, 0, y*w, 0, 0}, {0, 0, z, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w, y*z, 0, 0, 0, 0}, {0, 0, 0, 0, y, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w, 0, 0}, {0, 0, 0, 0, 0, z, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}),map(R^36,R^{{0}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}},{{1, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2}})),subquotient(map(R^36,R^{{0}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}},{{1, 0, 0, 0, 0, 0, 0, 0, y*z, 0, w^2, x*w, y^2, z*w, x*w, x*y+z^2, z^2, y*z, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0}, {0, 0, z, 0, 0, y, 0, 0, 0, w^2, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, x*w, 0, 0, 0, 0, 0, 0, y*w}, {0, w, 0, z, 0, 0, y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, y*w, 0, 0, 0, 0, y^2, 0, x*w, 0, y*z, 0, 0}, {0, y, x, 0, 0, z, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, x*w, 0, y^2, 0, 0, 0}, {0, 0, 0, x, 0, 0, z, x*w, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, 0, 0, 0, 0, 0, 0, y^2, 0}, {0, 0, 0, 0, 0, 0, 0, 0, x*w, 0, y^2, z*w, 0, 0, 0, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, z, x, 0, 0, 0, 0, 0, 0, z^2, x*z, x*w, x*w, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w}, {1, x, 0, 0, z, 0, 0, y*w, y*z, z*w, w^2, x*w, 0, 0, 0, 0, 0, w^2, 0, 0, x*z, 0, z^2, 0, 0, y^2, 0, 0}, {0, z, 0, 0, 0, 0, w, 0, 0, x*z, 0, 0, 0, 0, 0, 0, y*z, x*w, 0, z^2, 0, 0, 0, x*z, 0, x^2, 0, 0}, {0, 0, 0, 0, x, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, x, 0, 0, z, x*w, x*z, y*z, 0, z^2, 0, 0, 0, 0, x^2, x*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, y, x, w, 0, 0, 0, 0, 0, z*w, y*w, x^2, y*z, y*z, y^2+x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w}, {0, w, y, 0, 0, 0, 0, z*w, 0, x*w, 0, 0, 0, 0, 0, 0, y*w, 0, z*w, 0, x^2, 0, 0, 0, 0, 0, 0, 0}, {1, x, 0, y, z, w, 0, x*z, y*z, z*w, w^2, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, x^2, 0, x*w, 0, w^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, 0, y*w}, {0, 0, 0, 0, x, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0}, {0, y, x, 0, 0, z, 0, y*z, x^2, 0, z*w, y*w, 0, 0, 0, 0, x*w, 0, 0, 0, 0, 0, x*w, 0, 0, 0, 0, z*w}, {0, 0, z, x, w, 0, 0, 0, 0, 0, x*z, 0, x*y, y*z+w^2, z^2, z*w, z*w, y*w, x*w, x*w, 0, 0, z*w, 0, 0, 0, 0, 0}, {0, 0, w, 0, y, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, 0, y*z, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, y*z+w^2, 0, x*y, 0, z^2, 0, y*w, 0, 0}, {1, x, 0, y, z, w, 0, x*z, y*z, z*w, y*z+w^2, x*w, 0, 0, 0, 0, 0, 0, y*w, y*w, 0, 0, 0, 0, x*y, y^2, 0, y*z}, {0, z, 0, 0, 0, 0, w, 0, 0, x*z, x*w, 0, 0, 0, 0, 0, y*z, 0, z^2, 0, 0, 0, 0, 0, 0, 0, x*y, 0}, {0, w, 0, z, 0, 0, y, z*w, z^2, 0, z^2, y*z+w^2, 0, 0, 0, 0, 0, 0, z*w, z*w, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, x, w, 0, 0, 0, 0, 0, 0, 0, x*z, y*w, x*y, 0, y^2, y^2, z*w, 0, w^2, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y^2, 0, 0, 0, 0, 0, 0, y*w, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, w, 0, y, 0, 0, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, x*y, 0, y*w, y*z, 0, 0, z*w, 0, 0}, {0, w, y, 0, 0, 0, 0, z*w, 0, x*w, 0, y*z, 0, 0, 0, 0, y*w, 0, 0, 0, 0, 0, 0, 0, y*w, 0, 0, x*y}, {1, x, 0, 0, z, 0, 0, y*w, y*z, z*w, w^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, 0, 0, y^2, y*w, 0}, {0, 0, z, 0, 0, y, 0, 0, 0, w^2, y*w, z^2, 0, 0, 0, 0, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, x*w, y*z, x*z, x*z, x*y, 0, 0, 0, 0, 0, 0, 0, w^2, 0, 0}, {0, 0, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, w^2, y*z, 0, 0, 0, 0, y*w, 0, 0}, {0, 0, z, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w, y*z, 0, 0, 0, 0}, {0, 0, 0, 0, y, x, w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w, 0, 0}, {0, 0, 0, 0, 0, z, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w^2, z*w}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}),map(R^36,R^{{0}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}, {-2}},{{1, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*w, y*z, x*y, x^2+z*w, w^2, x*z}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x*y, 0, z*w, w^2, y*w, y^2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*z+w^2, z^2, y*w, x*w, x*y, z*w}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y*w, x^2, y^2+x*w, x*y, z*w, y*z}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z^2, x*z, x^2, y*z, 0, x*w}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, z*w, x*w, y*z, x*z, y^2, x*y+z^2}})),{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, z, 0, 0, 0, w, 0, 0, 0, 0, y, 0, z, z, 0, 0, 0, x, y, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, y, z, 0, w, 0, 0, 0, 0, 0, w, y, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, w, z, 0, 0, 0, y, 0, 0, 0, x, z, w, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w, 0, 0, 0, y, x, x, 0, w, z, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, w, x, 0, z, x, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, z, z, 0, 0, 0, 0, x, 0, 0, 0, y, 0, 0, w, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}});
  assert try m == quotient(m, map(target m, cover target m, 1), Strategy => "Reflexive") else false
  quotient(m, map(target m, cover target m, 1), DegreeLimit => 0)
  elapsedTime(m // 1);
  assert not elapsedTime isIdempotent m -- 0.002
  assert elapsedTime isIdempotent(2 * id_(target m))
  leadCoefficient (2 * id_(target m))
///

///
  -- from David's email: reaches recursion limit overnight
  needsPackage "DirectSummands"
  kk = ZZ/101
  S = kk[x,y,z]
  I = monomialIdeal(x^4,x*y,y^4,x*z,y^2*z,z^4)
  R = S/I
  F = res(coker vars R, LengthLimit => 5)
  M = coker F.dd_5;
  debugLevel = 1
  elapsedTime L5 = summands M;
///
